// Code generated by protoc-gen-go. DO NOT EDIT.
// source: replica.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SyncMsg struct {
	ClientId             string   `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Timestamp            uint64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Action               []byte   `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Mac                  []byte   `protobuf:"bytes,4,opt,name=mac,proto3" json:"mac,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncMsg) Reset()         { *m = SyncMsg{} }
func (m *SyncMsg) String() string { return proto.CompactTextString(m) }
func (*SyncMsg) ProtoMessage()    {}
func (*SyncMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_replica_2971a825662266ba, []int{0}
}
func (m *SyncMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncMsg.Unmarshal(m, b)
}
func (m *SyncMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncMsg.Marshal(b, m, deterministic)
}
func (dst *SyncMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncMsg.Merge(dst, src)
}
func (m *SyncMsg) XXX_Size() int {
	return xxx_messageInfo_SyncMsg.Size(m)
}
func (m *SyncMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SyncMsg proto.InternalMessageInfo

func (m *SyncMsg) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *SyncMsg) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SyncMsg) GetAction() []byte {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *SyncMsg) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

type SyncReply struct {
	ClientId             string   `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Timestamp            uint64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Result               []byte   `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	ReplicaId            uint32   `protobuf:"varint,4,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	View                 uint64   `protobuf:"varint,5,opt,name=view,proto3" json:"view,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncReply) Reset()         { *m = SyncReply{} }
func (m *SyncReply) String() string { return proto.CompactTextString(m) }
func (*SyncReply) ProtoMessage()    {}
func (*SyncReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_replica_2971a825662266ba, []int{1}
}
func (m *SyncReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncReply.Unmarshal(m, b)
}
func (m *SyncReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncReply.Marshal(b, m, deterministic)
}
func (dst *SyncReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncReply.Merge(dst, src)
}
func (m *SyncReply) XXX_Size() int {
	return xxx_messageInfo_SyncReply.Size(m)
}
func (m *SyncReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncReply.DiscardUnknown(m)
}

var xxx_messageInfo_SyncReply proto.InternalMessageInfo

func (m *SyncReply) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *SyncReply) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SyncReply) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SyncReply) GetReplicaId() uint32 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *SyncReply) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

type PrePrepareMsg struct {
	Seq                  uint64   `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	View                 uint64   `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	Digest               []byte   `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	Mac                  []byte   `protobuf:"bytes,4,opt,name=mac,proto3" json:"mac,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrePrepareMsg) Reset()         { *m = PrePrepareMsg{} }
func (m *PrePrepareMsg) String() string { return proto.CompactTextString(m) }
func (*PrePrepareMsg) ProtoMessage()    {}
func (*PrePrepareMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_replica_2971a825662266ba, []int{2}
}
func (m *PrePrepareMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrePrepareMsg.Unmarshal(m, b)
}
func (m *PrePrepareMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrePrepareMsg.Marshal(b, m, deterministic)
}
func (dst *PrePrepareMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrePrepareMsg.Merge(dst, src)
}
func (m *PrePrepareMsg) XXX_Size() int {
	return xxx_messageInfo_PrePrepareMsg.Size(m)
}
func (m *PrePrepareMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PrePrepareMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PrePrepareMsg proto.InternalMessageInfo

func (m *PrePrepareMsg) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PrePrepareMsg) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *PrePrepareMsg) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *PrePrepareMsg) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

type PrepareMsg struct {
	ReplicaId            uint32   `protobuf:"varint,1,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	View                 uint64   `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	Seq                  uint64   `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	Digest               []byte   `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`
	Mac                  []byte   `protobuf:"bytes,5,opt,name=mac,proto3" json:"mac,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareMsg) Reset()         { *m = PrepareMsg{} }
func (m *PrepareMsg) String() string { return proto.CompactTextString(m) }
func (*PrepareMsg) ProtoMessage()    {}
func (*PrepareMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_replica_2971a825662266ba, []int{3}
}
func (m *PrepareMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareMsg.Unmarshal(m, b)
}
func (m *PrepareMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareMsg.Marshal(b, m, deterministic)
}
func (dst *PrepareMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareMsg.Merge(dst, src)
}
func (m *PrepareMsg) XXX_Size() int {
	return xxx_messageInfo_PrepareMsg.Size(m)
}
func (m *PrepareMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareMsg proto.InternalMessageInfo

func (m *PrepareMsg) GetReplicaId() uint32 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *PrepareMsg) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *PrepareMsg) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PrepareMsg) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *PrepareMsg) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

type CommitMsg struct {
	ReplicaId            uint32   `protobuf:"varint,1,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	View                 uint64   `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	Seq                  uint64   `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	Digest               []byte   `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`
	Mac                  []byte   `protobuf:"bytes,5,opt,name=mac,proto3" json:"mac,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitMsg) Reset()         { *m = CommitMsg{} }
func (m *CommitMsg) String() string { return proto.CompactTextString(m) }
func (*CommitMsg) ProtoMessage()    {}
func (*CommitMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_replica_2971a825662266ba, []int{4}
}
func (m *CommitMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitMsg.Unmarshal(m, b)
}
func (m *CommitMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitMsg.Marshal(b, m, deterministic)
}
func (dst *CommitMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitMsg.Merge(dst, src)
}
func (m *CommitMsg) XXX_Size() int {
	return xxx_messageInfo_CommitMsg.Size(m)
}
func (m *CommitMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CommitMsg proto.InternalMessageInfo

func (m *CommitMsg) GetReplicaId() uint32 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *CommitMsg) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *CommitMsg) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CommitMsg) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *CommitMsg) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

type Response struct {
	ReplicaId            uint32   `protobuf:"varint,1,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	Code                 uint32   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_replica_2971a825662266ba, []int{5}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetReplicaId() uint32 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *Response) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*SyncMsg)(nil), "protos.SyncMsg")
	proto.RegisterType((*SyncReply)(nil), "protos.SyncReply")
	proto.RegisterType((*PrePrepareMsg)(nil), "protos.PrePrepareMsg")
	proto.RegisterType((*PrepareMsg)(nil), "protos.PrepareMsg")
	proto.RegisterType((*CommitMsg)(nil), "protos.CommitMsg")
	proto.RegisterType((*Response)(nil), "protos.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReplicaClient is the client API for Replica service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReplicaClient interface {
	Sync(ctx context.Context, in *SyncMsg, opts ...grpc.CallOption) (*SyncReply, error)
	PrePrepare(ctx context.Context, in *PrePrepareMsg, opts ...grpc.CallOption) (*Response, error)
	Prepare(ctx context.Context, in *PrepareMsg, opts ...grpc.CallOption) (*Response, error)
	Commit(ctx context.Context, in *CommitMsg, opts ...grpc.CallOption) (*Response, error)
}

type replicaClient struct {
	cc *grpc.ClientConn
}

func NewReplicaClient(cc *grpc.ClientConn) ReplicaClient {
	return &replicaClient{cc}
}

func (c *replicaClient) Sync(ctx context.Context, in *SyncMsg, opts ...grpc.CallOption) (*SyncReply, error) {
	out := new(SyncReply)
	err := c.cc.Invoke(ctx, "/protos.Replica/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaClient) PrePrepare(ctx context.Context, in *PrePrepareMsg, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protos.Replica/PrePrepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaClient) Prepare(ctx context.Context, in *PrepareMsg, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protos.Replica/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaClient) Commit(ctx context.Context, in *CommitMsg, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protos.Replica/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicaServer is the server API for Replica service.
type ReplicaServer interface {
	Sync(context.Context, *SyncMsg) (*SyncReply, error)
	PrePrepare(context.Context, *PrePrepareMsg) (*Response, error)
	Prepare(context.Context, *PrepareMsg) (*Response, error)
	Commit(context.Context, *CommitMsg) (*Response, error)
}

func RegisterReplicaServer(s *grpc.Server, srv ReplicaServer) {
	s.RegisterService(&_Replica_serviceDesc, srv)
}

func _Replica_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Replica/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServer).Sync(ctx, req.(*SyncMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replica_PrePrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrePrepareMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServer).PrePrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Replica/PrePrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServer).PrePrepare(ctx, req.(*PrePrepareMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replica_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Replica/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServer).Prepare(ctx, req.(*PrepareMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replica_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Replica/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServer).Commit(ctx, req.(*CommitMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Replica_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Replica",
	HandlerType: (*ReplicaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _Replica_Sync_Handler,
		},
		{
			MethodName: "PrePrepare",
			Handler:    _Replica_PrePrepare_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _Replica_Prepare_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Replica_Commit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "replica.proto",
}

func init() { proto.RegisterFile("replica.proto", fileDescriptor_replica_2971a825662266ba) }

var fileDescriptor_replica_2971a825662266ba = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0xcf, 0x4a, 0xfb, 0x40,
	0x10, 0xc7, 0xbb, 0x4d, 0xfa, 0x27, 0xc3, 0x2f, 0xfc, 0xea, 0x80, 0x12, 0x8a, 0x87, 0x92, 0x53,
	0x0f, 0x52, 0x51, 0x0f, 0x3e, 0x80, 0xa7, 0x1e, 0x94, 0xb2, 0x3e, 0x80, 0xc4, 0x64, 0x28, 0x0b,
	0xf9, 0x67, 0x76, 0x55, 0xea, 0x4b, 0xf8, 0x72, 0x3e, 0x90, 0xec, 0xe6, 0xcf, 0xa6, 0x50, 0xf5,
	0x20, 0x78, 0xca, 0xcc, 0x90, 0xef, 0x7c, 0xbe, 0xbb, 0x33, 0x0b, 0x7e, 0x45, 0x65, 0x2a, 0xe2,
	0x68, 0x55, 0x56, 0x85, 0x2a, 0x70, 0x6c, 0x3e, 0x32, 0xcc, 0x60, 0x72, 0xbf, 0xcb, 0xe3, 0x5b,
	0xb9, 0xc5, 0x39, 0x4c, 0xe3, 0x54, 0x50, 0xae, 0xd6, 0x49, 0xc0, 0x16, 0x6c, 0xe9, 0xf1, 0x2e,
	0xc7, 0x53, 0xf0, 0x94, 0xc8, 0x48, 0xaa, 0x28, 0x2b, 0x83, 0xe1, 0x82, 0x2d, 0x5d, 0x6e, 0x0b,
	0x78, 0x02, 0xe3, 0x28, 0x56, 0xa2, 0xc8, 0x03, 0x67, 0xc1, 0x96, 0xff, 0x78, 0x93, 0xe1, 0x0c,
	0x9c, 0x2c, 0x8a, 0x03, 0xd7, 0x14, 0x75, 0x18, 0xbe, 0x33, 0xf0, 0x34, 0x8f, 0x53, 0x99, 0xee,
	0x7e, 0x47, 0xac, 0x48, 0x3e, 0xa7, 0xaa, 0x25, 0xd6, 0x99, 0x56, 0x35, 0xe7, 0x5c, 0x27, 0x86,
	0xeb, 0x73, 0x5b, 0x40, 0x04, 0xf7, 0x45, 0xd0, 0x6b, 0x30, 0x32, 0xed, 0x4c, 0x1c, 0x3e, 0x80,
	0xbf, 0xa9, 0x68, 0x53, 0x51, 0x19, 0x55, 0xa4, 0xaf, 0x61, 0x06, 0x8e, 0xa4, 0x27, 0xe3, 0xc7,
	0xe5, 0x3a, 0xec, 0x64, 0x43, 0x2b, 0xd3, 0x06, 0x12, 0xb1, 0x25, 0xd9, 0x19, 0xa8, 0xb3, 0x03,
	0x47, 0x7e, 0x03, 0xe8, 0x75, 0xdf, 0x33, 0xc8, 0xbe, 0x32, 0xd8, 0x27, 0x35, 0x7e, 0x1c, 0xeb,
	0xc7, 0xb2, 0xdd, 0x43, 0xec, 0x91, 0x65, 0xef, 0xc0, 0xbb, 0x29, 0xb2, 0x4c, 0xa8, 0xbf, 0x47,
	0xdf, 0xc1, 0x94, 0x93, 0x2c, 0x8b, 0x5c, 0xd2, 0xcf, 0xe4, 0xb8, 0x48, 0xc8, 0x90, 0x7d, 0x6e,
	0x62, 0xd3, 0x4f, 0x6e, 0x0d, 0xd9, 0xe3, 0x3a, 0xbc, 0xfc, 0x60, 0x30, 0xe1, 0xb5, 0x06, 0xcf,
	0xc0, 0xd5, 0x4b, 0x84, 0xff, 0xeb, 0x65, 0x96, 0xab, 0x66, 0x85, 0xe7, 0x47, 0xfd, 0x82, 0xd9,
	0xb1, 0x70, 0x80, 0xd7, 0x66, 0x00, 0xcd, 0x0c, 0xf0, 0xb8, 0xfd, 0x65, 0x6f, 0xea, 0xf3, 0x59,
	0x5b, 0x6e, 0x4d, 0x87, 0x03, 0xbc, 0x80, 0x49, 0xab, 0xc2, 0x9e, 0xea, 0x3b, 0xc9, 0x39, 0x8c,
	0xeb, 0x0b, 0xc7, 0xce, 0x4a, 0x37, 0x80, 0x43, 0x82, 0xc7, 0xfa, 0x1d, 0x5e, 0x7d, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x69, 0x72, 0x22, 0x4e, 0x9f, 0x03, 0x00, 0x00,
}
